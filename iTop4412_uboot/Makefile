#
# (C) Copyright 2000-2009
# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
#
# See file CREDITS for list of people who contributed to this
# project.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundatio; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307 USA
#

VERSION = 2010
PATCHLEVEL = 03
SUBLEVEL =
EXTRAVERSION =
ifneq "$(SUBLEVEL)" ""
U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
else
U_BOOT_VERSION = $(VERSION).$(PATCHLEVEL)$(EXTRAVERSION)
endif
TIMESTAMP_FILE = $(obj)include/timestamp_autogenerated.h
VERSION_FILE = $(obj)include/version_autogenerated.h

HOSTARCH := $(shell uname -m | \
	sed -e s/i.86/i386/ \
	    -e s/sun4u/sparc64/ \
	    -e s/arm.*/arm/ \
	    -e s/sa110/arm/ \
	    -e s/powerpc/ppc/ \
	    -e s/ppc64/ppc/ \
	    -e s/macppc/ppc/)

HOSTOS := $(shell uname -s | tr '[:upper:]' '[:lower:]' | \
	    sed -e 's/\(cygwin\).*/cygwin/')

# Set shell to bash if possible, otherwise fall back to sh
SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
	else if [ -x /bin/bash ]; then echo /bin/bash; \
	else echo sh; fi; fi)

export	HOSTARCH HOSTOS SHELL

#########################################################################
# Allow for silent builds
ifeq (,$(findstring s,$(MAKEFLAGS)))
XECHO = echo
else
XECHO = :
endif

#########################################################################
#
# U-boot build supports producing a object files to the separate external
# directory. Two use cases are supported:
#
# 1) Add O= to the make command line
# 'make O=/tmp/build all'
#
# 2) Set environement variable BUILD_DIR to point to the desired location
# 'export BUILD_DIR=/tmp/build'
# 'make'
#
# The second approach can also be used with a MAKEALL script
# 'export BUILD_DIR=/tmp/build'
# './MAKEALL'
#
# Command line 'O=' setting overrides BUILD_DIR environent variable.
#
# When none of the above methods is used the local build is performed and
# the object files are placed in the source directory.
#

# 编译时可以通过 O参数指定编译路径，这里并未使用
ifdef O
ifeq ("$(origin O)", "command line")
BUILD_DIR := $(O)
endif
endif

ifneq ($(BUILD_DIR),)
saved-output := $(BUILD_DIR)

# Attempt to create a output directory.
$(shell [ -d ${BUILD_DIR} ] || mkdir -p ${BUILD_DIR})

# Verify if it was successful.
BUILD_DIR := $(shell cd $(BUILD_DIR) && /bin/pwd)
$(if $(BUILD_DIR),,$(error output directory "$(saved-output)" does not exist))
endif # ifneq ($(BUILD_DIR),)

# BUILD_DIR 为空，所以设置为 CURDIR , CURDIR 是内置变量
# OBJTREE = ./
# SRCTREE = ./ 
# TOPDIR = ./ 
# LNDIR = ./
OBJTREE		:= $(if $(BUILD_DIR),$(BUILD_DIR),$(CURDIR))
SRCTREE		:= $(CURDIR)
TOPDIR		:= $(SRCTREE)
LNDIR		:= $(OBJTREE)
export	TOPDIR SRCTREE OBJTREE

# 指向根目录下的 mkconfig 
MKCONFIG	:= $(SRCTREE)/mkconfig
export MKCONFIG

# OBJTREE 与 SRCTREE 相同，本地编译
ifneq ($(OBJTREE),$(SRCTREE))
REMOTE_BUILD	:= 1
export REMOTE_BUILD
endif

# $(obj) and (src) are defined in config.mk but here in main Makefile
# we also need them before config.mk is included which is the case for
# some targets like unconfig, clean, clobber, distclean, etc.
ifneq ($(OBJTREE),$(SRCTREE))
obj := $(OBJTREE)/
src := $(SRCTREE)/
else
obj :=
src :=
endif
# obj src 在 config.mk 中也定义了，会自动扩展为包含 config.mk 的目录
export obj src

# Make sure CDPATH settings don't interfere
unexport CDPATH

#########################################################################
# make 时会进入这个分支
ifeq ($(obj)include/config.mk,$(wildcard $(obj)include/config.mk))

# Include autoconf.mk before config.mk so that the config options are available
# to all top level build files.  We need the dummy all: target to prevent the
# dependency target in autoconf.mk.dep from being the default.
# include/autoconf.dep  include/autoconf.mk 是两个目标，需要构建
# autoconf.mk 是生成的配置项，make 命令使用，用于配置编译的文件
# 这些配置的来源是板级配置文件(itop_4412_android.h)中定义的，
# .h 文件中是宏定义，再通过脚本转换为 .mk 形式
# autoconf.mk.dep 是 include/common.h 的依赖关系
# 这两个的生成方式，网上搜索资料
all:
sinclude $(obj)include/autoconf.mk.dep
sinclude $(obj)include/autoconf.mk

# load ARCH, BOARD, and CPU configuration
# ARCH   = arm             
# CPU    = arm_cortexa9    
# BOARD  = smdkc210        
# VENDOR = samsung         
# SOC    = s5pc210         
# CORE   =  SCP            
include $(obj)include/config.mk
export	ARCH CPU BOARD VENDOR SOC

# 配置编译器
ifndef CROSS_COMPILE
ifeq ($(ARCH),arm)
CROSS_COMPILE = /opt/toolchain/arm-2009q3/bin/arm-none-linux-gnueabi-
endif
endif	# CROSS_COMPILE

export	CROSS_COMPILE

# load other configuration
# 加载顶层config.mk 这里导出了一些变量，后面会使用
# 在该 config.mk 中包含了其他的 config.mk 文件
# 如 board/*/*/config.mk cpu/*/config.mk lib_arm/config.mk
# 也将 autoconf.mk 包含进来，这样在其他的目录中，只要包含
# 顶层的 config.mk 就可以获得所有的配置参数
include $(TOPDIR)/config.mk
#########################################################################
# U-Boot objects....order is important (i.e. start must be first)
# 指明需要编译的源码文件，库文件
# 库文件是在各个子目录中编译得到的
OBJS  = cpu/$(CPU)/start.o

OBJS := $(addprefix $(obj),$(OBJS))

LIBS  = lib_generic/libgeneric.a
LIBS += cpu/$(CPU)/lib$(CPU).a
ifdef SOC
LIBS += cpu/$(CPU)/$(SOC)/lib$(SOC).a
endif
LIBS += lib_$(ARCH)/lib$(ARCH).a
LIBS += fs/fat/libfat.a fs/ext2/libext2fs.a 
LIBS += disk/libdisk.a
LIBS += drivers/mmc/libmmc.a
LIBS += common/libcommon.a

LIBS := $(addprefix $(obj),$(LIBS))
.PHONY : $(LIBS) $(TIMESTAMP_FILE) $(VERSION_FILE)

LIBBOARD = board/$(BOARDDIR)/lib$(BOARD).a
LIBBOARD := $(addprefix $(obj),$(LIBBOARD))

# Add GCC lib
PLATFORM_LIBGCC = -L $(shell dirname `$(CC) $(CFLAGS) -print-libgcc-file-name`) -lgcc
PLATFORM_LIBS += $(PLATFORM_LIBGCC)
export PLATFORM_LIBS

# Special flags for CPP when processing the linker script.
# Pass the version down so we can handle backwards compatibility
# on the fly.
LDPPFLAGS += \
	-include $(TOPDIR)/include/u-boot/u-boot.lds.h \
	$(shell $(LD) --version | \
	  sed -ne 's/GNU ld version \([0-9][0-9]*\)\.\([0-9][0-9]*\).*/-DLD_MAJOR=\1 -DLD_MINOR=\2/p')

__OBJS := $(subst $(obj),,$(OBJS))
__LIBS := $(subst $(obj),,$(LIBS)) $(subst $(obj),,$(LIBBOARD))

#########################################################################
#########################################################################

# Always append ALL so that arch config.mk's can add custom ones
# 依赖的目标文件，都依赖于 u-boot
ALL += $(obj)u-boot.srec $(obj)u-boot.bin $(obj)System.map  
all:		$(ALL)

debug:
		@echo "HOSTARCH          : "${HOSTARCH}
		@echo "HOSTOS            : "${HOSTOS}
		@echo "HOSTCFLAGS        : "${HOSTCFLAGS}
		@echo "HOSTLDFLAGS       : "${HOSTLDFLAGS}
		@echo "HOSTSTRIP         : "${HOSTSTRIP}
		@echo "HOSTCC            : "${HOSTCC}
		@echo "PEDCFLAGS         : "${PEDCFLAGS}
		@echo "SHELL             : "${SHELL}
		@echo "  "
		@echo "TOPDIR            : "${TOPDIR}
		@echo "SRCTREE           : "${SRCTREE}
		@echo "OBJTREE           : "${OBJTREE}
		@echo "MKCONFIG          : "${MKCONFIG}
		@echo "  "
		@echo "ARCH              : "${ARCH}
		@echo "CPU               : "${CPU}
		@echo "BOARD             : "${BOARD}
		@echo "VENDOR            : "${VENDOR}
		@echo "SOC               : "${SOC}
		@echo "  "
		@echo "MAKE              : "${MAKE}
		@echo "CROSS_COMPILE     : "${CROSS_COMPILE}
		@echo "AS                : "${AS}
		@echo "LD                : "${LD}
		@echo "CC                : "${CC}
		@echo "CPP               : "${CPP}
		@echo "AR                : "${AR}
		@echo "NM                : "${NM}
		@echo "STRIP             : "${STRIP}
		@echo "OBJCOPY           : "${OBJCOPY}
		@echo "OBJDUMP           : "${OBJDUMP}
		@echo "PLATFORM_RELFLAGS : "${PLATFORM_RELFLAGS}
		@echo "PLATFORM_CPPFLAGS : "${PLATFORM_CPPFLAGS}
		@echo "PLATFORM_LDFLAGS  : "${PLATFORM_LDFLAGS}
		@echo "PLATFORM_LIBGCC   : "${PLATFORM_LIBGCC}
		@echo "PLATFORM_LIBS     : "${PLATFORM_LIBS}
		@echo "TEXT_BASE         : "${TEXT_BASE}
		@echo "LDPPFLAGS         : "${LDPPFLAGS}
		@echo "  "
		@echo "CPPFLAGS          : "${CPPFLAGS}
		@echo "CFLAGS            : "${CFLAGS}
		@echo "AFLAGS            : "${AFLAGS}
		@echo "  "
		@echo "OBJS              : "${OBJS}
		@echo "LIBS              : "${LIBS}
		@echo "LIBBOARD          : "${LIBBOARD}
		@echo "  "
		@echo "__OBJS            : "${__OBJS}
		@echo "__LIBS            : "${__LIBS}

$(obj)u-boot.hex:	$(obj)u-boot
		$(OBJCOPY) ${OBJCFLAGS} -O ihex $< $@

$(obj)u-boot.srec:	$(obj)u-boot
		$(OBJCOPY) -O srec $< $@

# 通过 u-boot 文件，生成 u-boot.bin 
# u-boot 文件为 ELF文件， 即将 ELF文件转换为 bin文件
$(obj)u-boot.bin:	$(obj)u-boot
		$(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
		@#./mkuboot
		
		@split -b 14336 u-boot.bin bl2
		@+make -C sdfuse_q/
		@#cp u-boot.bin u-boot-4212.bin
		@#cp u-boot.bin u-boot-4412.bin
		@#./sdfuse_q/add_sign
		@./sdfuse_q/chksum
		@./sdfuse_q/add_padding
		@rm bl2a*
		
		@echo

# 编译命令生成 u-boot 文件
GEN_UBOOT = \
		UNDEF_SYM=`$(OBJDUMP) -x $(LIBBOARD) $(LIBS) | \
		sed  -n -e 's/.*\($(SYM_PREFIX)__u_boot_cmd_.*\)/-u\1/p'|sort|uniq`;\
		cd $(LNDIR) && $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \
			--start-group $(__LIBS) --end-group $(PLATFORM_LIBS) \
			-Map u-boot.map -o u-boot
# u-boot 依赖较多内容，需要根据各目标规则生成
$(obj)u-boot:	depend $(SUBDIRS) $(OBJS) $(LIBBOARD) $(LIBS) $(LDSCRIPT) $(obj)u-boot.lds
		$(GEN_UBOOT)

# OBJS 就是 start.S 
$(OBJS):	depend
		$(MAKE) -C cpu/$(CPU) $(if $(REMOTE_BUILD),$@,$(notdir $@))

# 到各个子目录下编译 lib 文件
$(LIBS):	depend $(SUBDIRS)
		$(MAKE) -C $(dir $(subst $(obj),,$@))

# board/samsung/smdkc210/ 下的库文件
$(LIBBOARD):	depend $(LIBS)
		$(MAKE) -C $(dir $(subst $(obj),,$@))

# 这个目标原本是指向 tools 目录的，这里删除了
$(SUBDIRS):	depend
		$(MAKE) -C $@ all

# 进入到 cpu/arm_cortexa9/ 目录下执行 u-boot.lds 目标
# 其实没有这个目标，无实质作用
$(LDSCRIPT):	depend
		$(MAKE) -C $(dir $@) $(notdir $@)

# 使用 LDSCRIPT 生成 u-boot.lds 文件，用于最终链接时使用
$(obj)u-boot.lds: $(LDSCRIPT)
		$(CPP) $(CPPFLAGS) $(LDPPFLAGS) -ansi -D__ASSEMBLY__ -P - <$^ >$@

# 自动生成 version_autogenerated.h 文件
$(VERSION_FILE):
		@( printf '#define U_BOOT_VERSION "U-Boot %s%s"\n' "$(U_BOOT_VERSION)" \
		 '$(shell $(TOPDIR)/tools/setlocalversion $(TOPDIR))' ) > $@.tmp
		@cmp -s $@ $@.tmp && rm -f $@.tmp || mv -f $@.tmp $@

# 自动生成 timestamp_autogenerated.h 文件
$(TIMESTAMP_FILE):
		@date +'#define U_BOOT_DATE "%b %d %C%y"' > $@
		@date +'#define U_BOOT_TIME "%T"' >> $@

# Explicitly make _depend in subdirs containing multiple targets to prevent
# parallel sub-makes creating .depend files simultaneously.
# depend 目标用于生成各个子目录中源文件的依赖关系，
# 也依赖了版本文件和时间戳文件，同样是规则生成的
depend dep:	$(TIMESTAMP_FILE) $(VERSION_FILE) $(obj)include/autoconf.mk
		for dir in $(SUBDIRS) cpu/$(CPU) $(dir $(LDSCRIPT)) ; do \
			$(MAKE) -C $$dir _depend ; done

SYSTEM_MAP = \
		$(NM) $1 | \
		grep -v '\(compiled\)\|\(\.o$$\)\|\( [aUw] \)\|\(\.\.ng$$\)\|\(LASH[RL]DI\)' | \
		LC_ALL=C sort
$(obj)System.map:	$(obj)u-boot
		@$(call SYSTEM_MAP,$<) > $(obj)System.map

#
# Auto-generate the autoconf.mk file (which is included by all makefiles)
#
# This target actually generates 2 files; autoconf.mk and autoconf.mk.dep.
# the dep file is only include in this top level makefile to determine when
# to regenerate the autoconf.mk file.
$(obj)include/autoconf.mk.dep: $(obj)include/config.h include/common.h
	@$(XECHO) Generating $@ ; \
	set -e ; \
	: Generate the dependancies ; \
	$(CC) -x c -DDO_DEPS_ONLY -M $(HOSTCFLAGS) $(CPPFLAGS) \
		-MQ $(obj)include/autoconf.mk include/common.h > $@

$(obj)include/autoconf.mk: $(obj)include/config.h
	@$(XECHO) Generating $@ ; \
	set -e ; \
	: Extract the config macros ; \
	$(CPP) $(CFLAGS) -DDO_DEPS_ONLY -dM include/common.h | \
		sed -n -f tools/scripts/define2mk.sed > $@.tmp && \
	mv $@.tmp $@

#########################################################################
else	# !config.mk
all $(obj)u-boot.hex $(obj)u-boot.srec $(obj)u-boot.bin \
$(obj)u-boot.img $(obj)u-boot.dis $(obj)u-boot \
$(filter-out tools,$(SUBDIRS)) $(TIMESTAMP_FILE) $(VERSION_FILE) gdbtools \
updater env depend dep tags ctags etags cscope $(obj)System.map:
	@echo "System not configured - see README" >&2
	@ exit 1

tools:
	$(MAKE) -C tools
tools-all:
	$(MAKE) -C tools HOST_TOOLS_ALL=y
endif	# config.mk

#########################################################################

unconfig:
	@rm -f $(obj)include/config.h $(obj)include/config.mk \
		$(obj)board/*/config.tmp $(obj)board/*/*/config.tmp \
		$(obj)include/autoconf.mk $(obj)include/autoconf.mk.dep

%: %_config
	$(MAKE)


#========================================================================
# ARM
#========================================================================
#########################################################################
## ARM CORTEX Systems
#########################################################################
#add by dg 2015-08-04 for android ,linux 
itop_4412_android_config_scp_1GDDR:		unconfig
	@#$(MKCONFIG) itop_4412_android_config_scp_1GDDR arm arm_cortexa9 smdkc210 samsung s5pc210 SCP_1GDDR
	@$(MKCONFIG) $(@:_config=) arm arm_cortexa9 smdkc210 samsung s5pc210 SCP_1GDDR


#########################################################################
#########################################################################
#########################################################################

clean:
	@rm -f $(obj)tools/bmp_logo	   $(obj)tools/easylogo/easylogo  \
	       $(obj)tools/env/{fw_printenv,fw_setenv}			  \
	       $(obj)tools/envcrc					  \
	       $(obj)tools/gdb/{astest,gdbcont,gdbsend}			  \
	       $(obj)tools/gen_eth_addr    $(obj)tools/img2srec		  \
	       $(obj)tools/mkimage	   $(obj)tools/mpc86x_clk	  \
	       $(obj)tools/ncb		   $(obj)tools/ubsha1
	@rm -f $(obj)board/cray/L1/{bootscript.c,bootscript.image}	  \
	       $(obj)board/netstar/{eeprom,crcek,crcit,*.srec,*.bin}	  \
	       $(obj)board/trab/trab_fkt   $(obj)board/voiceblue/eeprom   \
	       $(obj)board/armltd/{integratorap,integratorcp}/u-boot.lds  \
	       $(obj)lib_blackfin/u-boot.lds				  \
	       $(obj)u-boot.lds						  \
	       $(obj)cpu/blackfin/bootrom-asm-offsets.[chs]
	@rm -f $(obj)include/bmp_logo.h
	@rm -f $(TIMESTAMP_FILE) $(VERSION_FILE)
	@find $(OBJTREE) -type f \
		\( -name 'core' -o -name '*.bak' -o -name '*~' \
		-o -name '*.o'	-o -name '*.a' -o -name '*.exe'	\) -print \
		| xargs rm -f

clobber:	clean
	@find $(OBJTREE) -type f \( -name .depend \
		-o -name '*.srec' -o -name 'u-boot*.bin' -o -name u-boot.img \) \
		-print0 \
		| xargs -0 rm -f
	@rm -f $(OBJS) $(obj)*.bak $(obj)tags $(obj)ctags $(obj)etags $(obj)TAGS \
		$(obj)cscope.* $(obj)*.*~
	@rm -f $(obj)u-boot $(obj)u-boot.map $(obj)u-boot.hex $(ALL)
	@rm -f $(obj)u-boot.kwb
	@rm -f $(obj)u-boot.imx
	@rm -f $(obj)tools/{env/crc32.c,inca-swap-bytes}
	@rm -f $(obj)cpu/mpc824x/bedbug_603e.c
	@rm -f $(obj)include/asm/proc $(obj)include/asm/arch $(obj)include/asm
	@[ ! -d $(obj)nand_spl ] || find $(obj)nand_spl -name "*" -type l -print | xargs rm -f
	@[ ! -d $(obj)onenand_ipl ] || find $(obj)onenand_ipl -name "*" -type l -print | xargs rm -f

ifeq ($(OBJTREE),$(SRCTREE))
mrproper \
distclean:	clobber unconfig
else
mrproper \
distclean:	clobber unconfig
	rm -rf $(obj)*
endif

backup:
	F=`basename $(TOPDIR)` ; cd .. ; \
	gtar --force-local -zcvf `date "+$$F-%Y-%m-%d-%T.tar.gz"` $$F

#########################################################################
